Using `integer_validator` method of BaseGeometry class
=======================================================

Importing the class
===================

::

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

When the method is called rightly
================================

::

	>>> bg = BaseGeometry()
	>>> bg.integer_validator("my_int", 12)
	>>> bg.integer_validator("width", 89)

When the method is called wrongly
================================

::

	>>> bg.integer_validator("name", "John")
	Traceback (most recent call last):
	TypeError: name must be an integer

::

	>>> bg.integer_validator("age", 0)
	Traceback (most recent call last):
	ValueError: age must be greater than 0

::

	>>> bg.integer_validator("distance", -4)
	Traceback (most recent call last):
	ValueError: distance must be greater than 0

When one argument is provided
=============================

::

	>>> bg.integer_validator("distance")
	Traceback (most recent call last):
	TypeError: integer_validator() missing 1 required positional argument: 'value'

::

	>>> bg.integer_validator()
	Traceback (most recent call last):
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

When the `area` method is passed
================================

::

	>>> bg.area()
	Traceback (most recent call last):
	Exception: area() is not implemented

When list and tuple are passed as integer_validator()'s argument
================================================================

::

	>>> bg.integer_validator("name", [4])
	Traceback (most recent call last):
	TypeError: name must be an integer

::

	>>> bg.integer_validator("name", (2, 4))
	Traceback (most recent call last):
	TypeError: name must be an integer

When the value argument is a set or None or boolean
===================================================

::

	>>> bg.integer_validator("age", {2, 4})
	Traceback (most recent call last):
	TypeError: age must be an integer

::

	>>> bg.integer_validator("value", None)
	Traceback (most recent call last):
	TypeError: value must be an integer

::

	>>> bg.integer_validator("name", True)
	Traceback (most recent call last):
	TypeError: name must be an integer

